/** @module challenge.paper */require( 'challenge.paper', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    "use strict";

var CODE_BEHIND = {
  keydown: keydown,
  onAngleChanged: onAngleChanged
};


function keydown( key ) {
  var that = this;

  console.info("[challenge.paper] key=", key);

  var now = Date.now();
  if( now - this.lastThrow < 5000 ) return;
  
  switch( key.toUpperCase() ) {
  case 'ARROWRIGHT':
    this.scoreRight++;
    if( this.scoreRight > 4 ) {
      window.setTimeout(function() {
        that.failure = 1;
      }, 500);
    }
    break;
  case 'ARROWLEFT':
    this.scoreLeft++;
    if( this.scoreLeft > 4 ) {
      window.setTimeout(function() {
        that.success = 1;
      }, 500);
    }
    break;
  case ' ':
    swingTheWheel.call( this );
    this.lastThrow = now;
    break;
  }
}


function onAngleChanged( v ) {
  this.rotate = "rotate(" + v + "deg)";  
}


function swingTheWheel() {
  this.angle += 180 + Math.floor( Math.random() * 8 ) * 45;
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "onAngleChanged", "keydown" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_integer = Converters.get('integer');
    var conv_float = Converters.get('float');
    var conv_string = Converters.get('string');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("scoreLeft", { cast: conv_integer(0) });
        pm.create("scoreRight", { cast: conv_integer(0) });
        pm.create("angle", { cast: conv_float(0) });
        pm.create("rotate", { cast: conv_string });
        pm.create("lastThrow", { cast: conv_float(0) });
        pm.createAction("success")
        pm.createAction("failure")
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        var e_0 = new Tag('DIV', ["class"]);
        var e_1 = new Tag('DIV', ["class","textcontent"]);
        var e_2 = new Tag('DIV', ["class"]);
        var e_3 = new Tag('DIV');
        var e_4 = new Tag('DIV', ["class"]);
        var e_5 = new Tag('DIV', ["class"]);
        var e_6 = new Tag('DIV', ["class"]);
        var e_7 = new Tag('DIV', ["class"]);
        var e_8 = new Tag('DIV', ["class"]);
        var e_9 = new Tag('DIV', ["class"]);
        var e_A = new Tag('DIV', ["class"]);
        var e_B = new Tag('DIV', ["class"]);
        $.add( e_3, e_4, e_5, e_6, e_7, e_8, e_9, e_A, e_B );
        $.add( e_2, e_3 );
        var e_C = new Tag('DIV', ["class","textcontent"]);
        $.add( e_0, e_1, e_2, e_C );
        var e_D = new Tag('P', ["innerhtml"]);
        $.add( e_, e_0, e_D );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'scoreLeft'},
          B:{obj: e_1,
              name: 'textcontent'},
          name:"score-left > e_1/textcontent"
        });
        new Link({
          A:{obj: that,
              name: 'scoreRight'},
          B:{obj: e_C,
              name: 'textcontent'},
          name:"score-right > e_C/textcontent"
        });
        //-----------------------
        // On attribute changed.
        pm.on( "angle", function(v) {
          try {
            CODE_BEHIND.onAngleChanged.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onAngleChanged" of module "mod/challenge.paper.js" for attribute "angle"!  ');
            console.error( ex );
          }} );
        pm.on("rotate", function(v) {
          e_3.$.style["transform"] = v;
        });
        //----------------------
        // Initialize elements.
        e_.class = "challenge-paper background";
        e_0.class = "row";
        e_1.class = "shadowFFF";
        e_2.class = "wheel thm-ele12";
        e_4.class = "stone";
        e_5.class = "paper";
        e_6.class = "scissors";
        e_7.class = "well";
        e_8.class = "stone2";
        e_9.class = "paper2";
        e_A.class = "scissors2";
        e_B.class = "well2";
        e_C.class = "shadowFFF";
        e_D.innerhtml = "Tapez sur <b>ESPACE</b> pour lancer le pierre/feuille/ciseaux/puit.<br/><b>GAUCHE</b> (vous) et <b>DROITE</b> (dragon) pour attribuer les points.<br/>La partie se joue en <b>5</b> points.";
        //------------------------
        // Initialize attributes.
        this.scoreLeft = defVal(args, "scoreLeft", 0);
        this.scoreRight = defVal(args, "scoreRight", 0);
        this.angle = defVal(args, "angle", 0);
        this.rotate = defVal(args, "rotate", "rotate(0deg)");
        this.lastThrow = defVal(args, "lastThrow", 0);
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/challenge.paper.js', ex);
        throw Error('Instantiation error in XJS of "mod/challenge.paper.js":\n' + ex)
      }
    };
    //------------------
    // Static members..
    ViewClass.prototype.keydown = CODE_BEHIND.keydown;
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/challenge.paper.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module challenge.paper
 * @see module:$
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters

 */
});