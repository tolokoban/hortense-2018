/** @module challenge.anagram */require( 'challenge.anagram', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    "use strict";

var CODE_BEHIND = {
  onStart: onStart,
  onMap: onMap,
  keydown: keydown,
  completeWithDashes: completeWithDashes,
  onTimer: onTimer,
  onHint: onHint
};


var $ = require("dom");
var Sound = require("sound");


function onStart() {
  var choice = Math.floor( Math.random() * this.words.length );
  var word = this.words[ choice ].toUpperCase();
  var letters = shuffle( extractLetters( word ) );

  this.letters = letters;
  this.solution = word;
  this.proposition = "---";
  this.proposition = "";
}


function extractLetters( word ) {
  var letters = [];
  for( var i=0; i<word.length; i++ ) {
    letters.push( word.charAt( i ).toUpperCase() );
  }
  return letters;
}


function shuffle( arr ) {
  var i, j, tmp;
  for( i = 0 ; i < arr.length ; i++ ) {
    tmp = arr[i];
    j = Math.floor( Math.random() * arr.length );
    arr[i] = arr[j];
    arr[j] = tmp;
  }
  return arr;
}


function onMap( letter ) {
  return $.div( [letter] );
}


function keydown( rawKey ) {
  var key = rawKey.toUpperCase();
  if( key === 'BACKSPACE' ) return backspace.call( this );
  if( this.letters.indexOf( key ) === -1 ) return Sound.play( "error" );
  if( this.proposition.length >= this.solution.length ) return Sound.play( "error" );
  this.proposition += key;
  if( this.proposition === this.solution ) {
    this.success = 1;
    this.stop = 1;
  }
}


function backspace() {
  if( this.proposition.length > this.hint )
    this.proposition = this.proposition.substr( 0, this.proposition.length - 1 );
  else
    Sound.play( "error" );
}

function completeWithDashes( proposition ) {
  var out = [];
  var i, char;
  for( i = 0 ; i < proposition.length ; i++ ) {
    char = proposition.charAt(i);
    if( i < this.hint ) out.push( $.div( 'hint', [char] ) );
    else out.push( $.div( [char] ) );
  }
  for( i = proposition.length; i < this.solution.length ; i++ ) {
    out.push( $.div( 'dash', ['-'] ) );
  }

  return out;
}

function onTimer( v ) {
  if( v === 0 ) {
    this.failure = 1;
    return;
  }
  var size = this.solution.length;
  if( size < 5 ) return;
  if( v === 60 ) this.hint = 1;
  else if( v === 40 && size > 5 ) this.hint = 2;
  else if( v === 20 && size > 7 ) this.hint = 3;  
}


function onHint() {
  this.proposition = this.solution.substr(0, this.hint) + this.proposition.substr( this.hint );
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    var HortenseChrono = require('hortense.chrono');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "onHint", "onTimer", "onStart", "keydown", "onMap", "completeWithDashes" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_array = Converters.get('array');
    var conv_string = Converters.get('string');
    var conv_integer = Converters.get('integer');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("words", { cast: conv_array });
        pm.create("letters", { cast: conv_array });
        pm.create("solution", { cast: conv_string });
        pm.create("proposition", { cast: conv_string });
        pm.create("hint", { cast: conv_integer(0) });
        pm.create("timer", { cast: conv_integer(0) });
        pm.createAction("start")
        pm.createAction("stop")
        pm.createAction("success")
        pm.createAction("failure")
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        var e_0 = new HortenseChrono({ initialTime: 120 });
        var e_1 = new Tag('DIV', ["class"]);
        var e_2 = new Tag('DIV', ["class"]);
        $.add( e_, e_0, e_1, e_2 );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'start'},
          B:{obj: e_0,
              name: 'start'},
          name:"start > e_0/start"
        });
        new Link({
          A:{obj: that,
              name: 'stop'},
          B:{obj: e_0,
              name: 'stop'},
          name:"stop > e_0/stop"
        });
        new Link({
          A:{obj: that,
              name: 'timer'},
          B:{obj: e_0,
              name: 'value'},
          name:"timer > e_0/value"
        });
        new Link({
          A:{obj: that,
              name: 'letters'},
          B:{action: function(v) {
          // Updating children of e_1.
          $.clear(e_1);
          if( !Array.isArray( v ) ) v = [v];
          v.forEach(function (elem) {
            $.add(e_1, elem);
          });},
              map: function() {
          return CODE_BEHIND.onMap.apply(that, arguments)}},
          name:"letters > undefined"
        });
        new Link({
          A:{obj: that,
              name: 'proposition'},
          B:{action: function(v) {
          // Updating children of e_2.
          $.clear(e_2);
          if( !Array.isArray( v ) ) v = [v];
          v.forEach(function (elem) {
            $.add(e_2, elem);
          });},
              converter: CODE_BEHIND.completeWithDashes.bind( this )},
          name:"proposition > undefined"
        });
        //-----------------------
        // On attribute changed.
        pm.on( "hint", function(v) {
          try {
            CODE_BEHIND.onHint.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onHint" of module "mod/challenge.anagram.js" for attribute "hint"!  ');
            console.error( ex );
          }} );
        pm.on( "timer", function(v) {
          try {
            CODE_BEHIND.onTimer.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onTimer" of module "mod/challenge.anagram.js" for attribute "timer"!  ');
            console.error( ex );
          }} );
        pm.on( "start", function(v) {
          try {
            CODE_BEHIND.onStart.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onStart" of module "mod/challenge.anagram.js" for attribute "start"!  ');
            console.error( ex );
          }} );
        //----------------------
        // Initialize elements.
        e_.class = "challenge-anagram background";
        e_1.class = "letters shadowFFF";
        e_2.class = "proposition shadowFFF";
        //------------------------
        // Initialize attributes.
        this.words = defVal(args, "words", ["pomme","chien","chat","renard","truite","poisson","hortense","anniversaire","septembre","college","histoire","cartable","manger","boire","banane","abricot","poire","limace","escargot","elephant","bonbon","nuit","jour","bateau","avion","fille","animal","meteo","terre","pluie","poussiere","meteorite","explosion","citrouille","singe","tortue","lion","oiseau","girafe","cochon","automne"]);
        this.letters = defVal(args, "letters", []);
        this.solution = defVal(args, "solution", "");
        this.proposition = defVal(args, "proposition", "");
        this.hint = defVal(args, "hint", 0);
        this.timer = args["timer"];
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/challenge.anagram.js', ex);
        throw Error('Instantiation error in XJS of "mod/challenge.anagram.js":\n' + ex)
      }
    };
    //------------------
    // Static members..
    ViewClass.prototype.keydown = CODE_BEHIND.keydown;
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/challenge.anagram.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module challenge.anagram
 * @see module:$
 * @see module:dom
 * @see module:sound
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters
 * @see module:hortense.chrono

 */
});