/** @module challenge.nim */require( 'challenge.nim', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    // Code behind.
"use strict";


var CODE_BEHIND = {
  onEatenChanged: onEatenChanged,
  keydown: keydown
};


var $ = require("dom");


function keydown( key ) {
  var lastTime = this._lastTime || 0;
  var now = Date.now();
  if( now - lastTime < 2000 ) return;
  
  switch( key ) {
  case "1":
  case "2":
  case "3":
    lastTime = now;
    this.eaten += parseInt( key );
    window.setTimeout( play.bind( this ), 1000 );
    break;
  }
}


function onEatenChanged( eaten ) {
  var items = $(this).querySelectorAll("div.item");
  for( var i = 0 ; i < items.length ; i++ ) {
    var item = items[i];
    if( i < eaten ) {
      $.addClass( item, 'miam' );
    }
    else {
      $.removeClass( item, 'miam' );
    }     
  }
}


function play() {
  if( this.eaten >= 17 ) {
    this.success = 1;
    return;
  }

  var remain = 17 - this.eaten;
  var modulo = remain % 4;
  if( modulo === 0) modulo = 1 + Math.floor( Math.random() * 3 );
  this.eaten += modulo;

  var that = this;
  window.setTimeout(function() {
    if( that.eaten >= 17 ) that.failure = 1;
  }, 1000);
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "onEatenChanged", "keydown" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_integer = Converters.get('integer');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("eaten", { cast: conv_integer(0) });
        pm.createAction("success")
        pm.createAction("failure")
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        var e_0 = new Tag('DIV');
        var e_1 = new Tag('DIV', ["class"]);
        var e_2 = new Tag('DIV', ["class"]);
        var e_3 = new Tag('DIV', ["class"]);
        var e_4 = new Tag('DIV', ["class"]);
        var e_5 = new Tag('DIV', ["class"]);
        var e_6 = new Tag('DIV', ["class"]);
        var e_7 = new Tag('DIV', ["class"]);
        var e_8 = new Tag('DIV', ["class"]);
        var e_9 = new Tag('DIV', ["class"]);
        var e_A = new Tag('DIV', ["class"]);
        var e_B = new Tag('DIV', ["class"]);
        var e_C = new Tag('DIV', ["class"]);
        var e_D = new Tag('DIV', ["class"]);
        var e_E = new Tag('DIV', ["class"]);
        var e_F = new Tag('DIV', ["class"]);
        var e_G = new Tag('DIV', ["class"]);
        var e_H = new Tag('DIV', ["class"]);
        $.add( e_0, e_1, e_2, e_3, e_4, e_5, e_6, e_7, e_8, e_9, e_A, e_B, e_C, e_D, e_E, e_F, e_G, e_H );
        var e_I = new Tag('P', ["innerhtml"]);
        $.add( e_, e_0, e_I );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-----------------------
        // On attribute changed.
        pm.on( "eaten", function(v) {
          try {
            CODE_BEHIND.onEatenChanged.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onEatenChanged" of module "mod/challenge.nim.js" for attribute "eaten"!  ');
            console.error( ex );
          }} );
        //----------------------
        // Initialize elements.
        e_.class = "challenge-nim background";
        e_1.class = "item";
        e_2.class = "item";
        e_3.class = "item";
        e_4.class = "item";
        e_5.class = "item";
        e_6.class = "item";
        e_7.class = "item";
        e_8.class = "item";
        e_9.class = "item";
        e_A.class = "item";
        e_B.class = "item";
        e_C.class = "item";
        e_D.class = "item";
        e_E.class = "item";
        e_F.class = "item";
        e_G.class = "item";
        e_H.class = "item";
        e_I.innerhtml = "Prenez <b>1</b>, <b>2</b> ou <b>3</b> citrouilles. Celui qui prend les derni√®res gagne la partie.";
        //------------------------
        // Initialize attributes.
        this.eaten = defVal(args, "eaten", 0);
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/challenge.nim.js', ex);
        throw Error('Instantiation error in XJS of "mod/challenge.nim.js":\n' + ex)
      }
    };
    //------------------
    // Static members..
    ViewClass.prototype.keydown = CODE_BEHIND.keydown;
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/challenge.nim.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module challenge.nim
 * @see module:$
 * @see module:dom
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.view
 * @see module:tfw.binding.converters

 */
});