/** @module challenge.main */require( 'challenge.main', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    // Code behind.
"use strict";

var CODE_BEHIND = {
  keydown: keydown,
  mapChallenges: mapChallenges
};


var $ = require("dom");

function keydown( rawKey ) {
  var key = rawKey.toUpperCase();
  console.info("[challenge.main] key=", key);
  if( key === 'A' ) this.challenge = "anagram";
  else if( key === 'B' ) this.challenge = "twister";
}


function mapChallenges( challenge ) {
  return $.div( "challenge", "thm-ele12", challenge );
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "keydown", "mapChallenges" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_array = Converters.get('array');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("challenges", { cast: conv_array });
        pm.createAction("challenge")
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        var e_0 = new Tag('DIV', ["class"]);
        var e_strip = new Tag('DIV');
        this.$elements.strip = e_strip;
        $.add( e_0, e_strip );
        $.add( e_, e_0 );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'challenges'},
          B:{action: function(v) {
          // Updating children of e_strip.
          $.clear(e_strip);
          if( !Array.isArray( v ) ) v = [v];
          v.forEach(function (elem) {
            $.add(e_strip, elem);
          });},
              map: function() {
          return CODE_BEHIND.mapChallenges.apply(that, arguments)}},
          name:"challenges > undefined"
        });
        //----------------------
        // Initialize elements.
        e_.class = "challenge-main";
        e_0.class = "strip-container";
        //------------------------
        // Initialize attributes.
        this.challenges = defVal(args, "challenges", ["anagram","twister","anagram","twister","anagram","twister","anagram","twister","anagram","twister"]);
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/challenge.main.js', ex);
        throw Error('Instantiation error in XJS of "mod/challenge.main.js":\n' + ex)
      }
    };
    //------------------
    // Static members..
    ViewClass.prototype.keydown = CODE_BEHIND.keydown;
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/challenge.main.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module challenge.main
 * @see module:$
 * @see module:dom
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters

 */
});